
Exercise2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000028f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000029d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3c  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000957  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f7  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009c  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001be  000001be  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 0000004c  0000015c  0000015c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000004e  0000010e  0000010e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.number   00000002  00800100  00800100  00000260  2**0
                  ALLOC
 17 .text.__dummy_fini 00000002  000001c6  000001c6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000001c8  000001c8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000001ca  000001ca  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000001a8  000001a8  0000023c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000001c2  000001c2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_2>
   c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  68:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  6c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  70:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  74:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  78:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  7c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  80:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  84:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  88:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  8c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  90:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  94:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  98:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  9c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  a0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  a4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  a8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  ac:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  b0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

000000b4 <.dinit>:
  b4:	01 00       	.word	0x0001	; ????
  b6:	01 02       	muls	r16, r17
  b8:	80 00       	.word	0x0080	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	e4 eb       	ldi	r30, 0xB4	; 180
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	17 c0       	rjmp	.+46     	; 0xfc <__do_clear_bss+0x8>
  ce:	b5 91       	lpm	r27, Z+
  d0:	a5 91       	lpm	r26, Z+
  d2:	35 91       	lpm	r19, Z+
  d4:	25 91       	lpm	r18, Z+
  d6:	05 91       	lpm	r16, Z+
  d8:	07 fd       	sbrc	r16, 7
  da:	0c c0       	rjmp	.+24     	; 0xf4 <__do_clear_bss>
  dc:	95 91       	lpm	r25, Z+
  de:	85 91       	lpm	r24, Z+
  e0:	ef 01       	movw	r28, r30
  e2:	f9 2f       	mov	r31, r25
  e4:	e8 2f       	mov	r30, r24
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0x20>
  f0:	fe 01       	movw	r30, r28
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_clear_bss+0x8>

000000f4 <__do_clear_bss>:
  f4:	1d 92       	st	X+, r1
  f6:	a2 17       	cp	r26, r18
  f8:	b3 07       	cpc	r27, r19
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__do_clear_bss>
  fc:	e9 3b       	cpi	r30, 0xB9	; 185
  fe:	f4 07       	cpc	r31, r20
 100:	31 f7       	brne	.-52     	; 0xce <__do_copy_data+0x8>
 102:	0e 94 87 00 	call	0x10e	; 0x10e <_etext>
 106:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <exit>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

Disassembly of section .text:

000001be <__bad_interrupt>:
 1be:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

0000015c <__vector_2>:
#include<util/delay.h>

int number = 0;

ISR(INT1_vect) // External INT1 ISR
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
	if(number != 3000){
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	88 3b       	cpi	r24, 0xB8	; 184
 176:	9b 40       	sbci	r25, 0x0B	; 11
 178:	49 f0       	breq	.+18     	; 0x18c <__vector_2+0x30>
		number = -1000;
 17a:	88 e1       	ldi	r24, 0x18	; 24
 17c:	9c ef       	ldi	r25, 0xFC	; 252
 17e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTB = 0xFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	85 b9       	out	0x05, r24	; 5
 18a:	04 c0       	rjmp	.+8      	; 0x194 <__vector_2+0x38>
	}
	else{
		number = 0;
 18c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	EIFR = (1 << INTF1); // Clear the flag of interrupt INTF1
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	8c bb       	out	0x1c, r24	; 28
}
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

Disassembly of section .text.main:

0000010e <main>:

int main(void)
{
	// Interrupt on rising edge of INT1 pin
	EICRA = (1<<ISC11) | (1<<ISC10);
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	// Enable the INT1 interrupt (PD3))
	EIMSK=(1<<INT1);
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	8d bb       	out	0x1d, r24	; 29
	
	sei(); // Enable global interrupts
 118:	78 94       	sei
	
	DDRB=0xFF; // Set PORTB as output
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	84 b9       	out	0x04, r24	; 4
	
	PORTB=0x00; // Turn off all LEDs of PORTB
 11e:	15 b8       	out	0x05, r1	; 5
 120:	13 c0       	rjmp	.+38     	; 0x148 <main+0x3a>
	
    while(1)
    {
        for(; number < 3000; number++){ //CHANGE TO 3000
			if(number >= 0 && number <= 1){
 122:	02 97       	sbiw	r24, 0x02	; 2
 124:	10 f4       	brcc	.+4      	; 0x12a <main+0x1c>
				PORTB = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e9       	ldi	r24, 0x9F	; 159
 12c:	9f e0       	ldi	r25, 0x0F	; 15
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x20>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x26>
 134:	00 00       	nop
	
	PORTB=0x00; // Turn off all LEDs of PORTB
	
    while(1)
    {
        for(; number < 3000; number++){ //CHANGE TO 3000
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	88 3b       	cpi	r24, 0xB8	; 184
 152:	2b e0       	ldi	r18, 0x0B	; 11
 154:	92 07       	cpc	r25, r18
 156:	2c f3       	brlt	.-54     	; 0x122 <main+0x14>
			if(number >= 0 && number <= 1){
				PORTB = 1;
			}
			_delay_ms(1);
		}
		PORTB = 0;
 158:	15 b8       	out	0x05, r1	; 5
    }
 15a:	f6 cf       	rjmp	.-20     	; 0x148 <main+0x3a>

Disassembly of section .text.__dummy_fini:

000001c6 <_fini>:
 1c6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001c8 <__funcs_on_exit>:
 1c8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001ca <__simulator_exit>:
 1ca:	08 95       	ret

Disassembly of section .text.exit:

000001a8 <exit>:
 1a8:	ec 01       	movw	r28, r24
 1aa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__funcs_on_exit>
 1ae:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_fini>
 1b2:	ce 01       	movw	r24, r28
 1b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__simulator_exit>
 1b8:	ce 01       	movw	r24, r28
 1ba:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Exit>

Disassembly of section .text._Exit:

000001c2 <_Exit>:
 1c2:	0e 94 85 00 	call	0x10a	; 0x10a <_exit>
